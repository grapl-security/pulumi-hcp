#!/usr/bin/env bash

set -euo pipefail

# shellcheck source-path=SCRIPTDIR
source "$(dirname "${BASH_SOURCE[0]}")/lib/validate.sh"

readonly version="${1}"

# Location of our minimal testing Pulumi project
readonly test_project_dir=".buildkite/go-install-test"

# We'll create a dedicated directory to store Pulumi plugins and state
# data in. This makes it easy to verify that we installed the right
# plugin, and that we don't pollute the global directory hierarchy.
PULUMI_HOME="$(realpath ${test_project_dir}/pulumi-home)"
export PULUMI_HOME
rm -Rf "${PULUMI_HOME}"
mkdir "${PULUMI_HOME}"

function cleanup {
    echo "--- Removing test directory '${PULUMI_HOME}'"
    rm -Rf "${PULUMI_HOME}"
}
trap cleanup EXIT

# If something is wrong with this release, we don't want to poison the
# proxy.
export GOPROXY=direct
export GONOSUMDB=github.com/grapl-security

(
    cd "${test_project_dir}"

    echo "--- :go: Editing modules to use version '${version}' of the SDK"
    # Replace whatever version of the SDK is in `go.mod` with the one
    # we just built.
    go mod edit \
       -droprequire=github.com/grapl-security/pulumi-hcp/sdk \
       -require="github.com/grapl-security/pulumi-hcp/sdk@${version}"
    go mod tidy

    echo "--- :pulumi: Running minimal Pulumi preview"
    # We're using a local Pulumi login because we're not actually
    # interested in interacting with any real infrastructure in this
    # test.

    # Randomness courtesy of 1Password
    export PULUMI_CONFIG_PASSPHRASE="peddle mischief ivan terminal"
    # Store things in our testing directory
    pulumi login "file://${PULUMI_HOME}"
    pulumi stack init local-testing --non-interactive
    # This preview should be sufficient to trigger the download of the
    # plugin binary.
    pulumi preview --stack=local-testing --non-interactive

    validate_plugin "${version}"
)
