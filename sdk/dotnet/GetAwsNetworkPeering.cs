// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Hcp
{
    public static class GetAwsNetworkPeering
    {
        /// <summary>
        /// The AWS network peering data source provides information about an existing network peering between an HVN and a peer AWS VPC.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Hcp.GetAwsNetworkPeering.InvokeAsync(new Hcp.GetAwsNetworkPeeringArgs
        ///         {
        ///             HvnId = @var.Hvn_id,
        ///             PeeringId = @var.Peering_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAwsNetworkPeeringResult> InvokeAsync(GetAwsNetworkPeeringArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAwsNetworkPeeringResult>("hcp:index/getAwsNetworkPeering:getAwsNetworkPeering", args ?? new GetAwsNetworkPeeringArgs(), options.WithDefaults());

        /// <summary>
        /// The AWS network peering data source provides information about an existing network peering between an HVN and a peer AWS VPC.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Hcp.GetAwsNetworkPeering.InvokeAsync(new Hcp.GetAwsNetworkPeeringArgs
        ///         {
        ///             HvnId = @var.Hvn_id,
        ///             PeeringId = @var.Peering_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAwsNetworkPeeringResult> Invoke(GetAwsNetworkPeeringInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAwsNetworkPeeringResult>("hcp:index/getAwsNetworkPeering:getAwsNetworkPeering", args ?? new GetAwsNetworkPeeringInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAwsNetworkPeeringArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Input("hvnId", required: true)]
        public string HvnId { get; set; } = null!;

        /// <summary>
        /// The ID of the network peering.
        /// </summary>
        [Input("peeringId", required: true)]
        public string PeeringId { get; set; } = null!;

        public GetAwsNetworkPeeringArgs()
        {
        }
    }

    public sealed class GetAwsNetworkPeeringInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the HashiCorp Virtual Network (HVN).
        /// </summary>
        [Input("hvnId", required: true)]
        public Input<string> HvnId { get; set; } = null!;

        /// <summary>
        /// The ID of the network peering.
        /// </summary>
        [Input("peeringId", required: true)]
        public Input<string> PeeringId { get; set; } = null!;

        public GetAwsNetworkPeeringInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAwsNetworkPeeringResult
    {
        /// <summary>
        /// The time that the network peering was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The time after which the network peering will be considered expired if it hasn't transitioned into `ACCEPTED` or `ACTIVE` state.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The ID of the HashiCorp Virtual Network (HVN).
        /// </summary>
        public readonly string HvnId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the HCP organization where the network peering is located. Always matches the HVN's organization.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The account ID of the peer VPC in AWS.
        /// </summary>
        public readonly string PeerAccountId;
        /// <summary>
        /// The ID of the peer VPC in AWS.
        /// </summary>
        public readonly string PeerVpcId;
        /// <summary>
        /// The region of the peer VPC in AWS.
        /// </summary>
        public readonly string PeerVpcRegion;
        /// <summary>
        /// The ID of the network peering.
        /// </summary>
        public readonly string PeeringId;
        /// <summary>
        /// The ID of the HCP project where the network peering is located. Always matches the HVN's project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The peering connection ID used by AWS.
        /// </summary>
        public readonly string ProviderPeeringId;
        /// <summary>
        /// A unique URL identifying the network peering.
        /// </summary>
        public readonly string SelfLink;

        [OutputConstructor]
        private GetAwsNetworkPeeringResult(
            string createdAt,

            string expiresAt,

            string hvnId,

            string id,

            string organizationId,

            string peerAccountId,

            string peerVpcId,

            string peerVpcRegion,

            string peeringId,

            string projectId,

            string providerPeeringId,

            string selfLink)
        {
            CreatedAt = createdAt;
            ExpiresAt = expiresAt;
            HvnId = hvnId;
            Id = id;
            OrganizationId = organizationId;
            PeerAccountId = peerAccountId;
            PeerVpcId = peerVpcId;
            PeerVpcRegion = peerVpcRegion;
            PeeringId = peeringId;
            ProjectId = projectId;
            ProviderPeeringId = providerPeeringId;
            SelfLink = selfLink;
        }
    }
}
