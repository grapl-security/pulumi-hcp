// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;
using Pulumi.Utilities;

namespace Pulumi.Hcp
{
    public static class GetPackerImage
    {
        /// <summary>
        /// &gt; **Note:** This feature is currently in beta.
        /// 
        /// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var hardened_source = Output.Create(Hcp.GetPackerIteration.InvokeAsync(new Hcp.GetPackerIterationArgs
        ///         {
        ///             BucketName = "hardened-ubuntu-16-04",
        ///             Channel = "production",
        ///         }));
        ///         var foo = hardened_source.Apply(hardened_source =&gt; Output.Create(Hcp.GetPackerImage.InvokeAsync(new Hcp.GetPackerImageArgs
        ///         {
        ///             BucketName = "hardened-ubuntu-16-04",
        ///             CloudProvider = "aws",
        ///             IterationId = hardened_source.Ulid,
        ///             Region = "us-east-1",
        ///         })));
        ///         this.Packer_registry_ubuntu = foo.Apply(foo =&gt; foo.CloudImageId);
        ///     }
        /// 
        ///     [Output("packer-registry-ubuntu")]
        ///     public Output&lt;string&gt; Packer_registry_ubuntu { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPackerImageResult> InvokeAsync(GetPackerImageArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPackerImageResult>("hcp:index/getPackerImage:getPackerImage", args ?? new GetPackerImageArgs(), options.WithVersion());

        /// <summary>
        /// &gt; **Note:** This feature is currently in beta.
        /// 
        /// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var hardened_source = Output.Create(Hcp.GetPackerIteration.InvokeAsync(new Hcp.GetPackerIterationArgs
        ///         {
        ///             BucketName = "hardened-ubuntu-16-04",
        ///             Channel = "production",
        ///         }));
        ///         var foo = hardened_source.Apply(hardened_source =&gt; Output.Create(Hcp.GetPackerImage.InvokeAsync(new Hcp.GetPackerImageArgs
        ///         {
        ///             BucketName = "hardened-ubuntu-16-04",
        ///             CloudProvider = "aws",
        ///             IterationId = hardened_source.Ulid,
        ///             Region = "us-east-1",
        ///         })));
        ///         this.Packer_registry_ubuntu = foo.Apply(foo =&gt; foo.CloudImageId);
        ///     }
        /// 
        ///     [Output("packer-registry-ubuntu")]
        ///     public Output&lt;string&gt; Packer_registry_ubuntu { get; set; }
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPackerImageResult> Invoke(GetPackerImageInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPackerImageResult>("hcp:index/getPackerImage:getPackerImage", args ?? new GetPackerImageInvokeArgs(), options.WithVersion());
    }


    public sealed class GetPackerImageArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        /// <summary>
        /// Name of the cloud provider this image is stored-in.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public string CloudProvider { get; set; } = null!;

        /// <summary>
        /// HCP ID of this image.
        /// </summary>
        [Input("iterationId", required: true)]
        public string IterationId { get; set; } = null!;

        /// <summary>
        /// Region this image is stored in, if any.
        /// </summary>
        [Input("region", required: true)]
        public string Region { get; set; } = null!;

        public GetPackerImageArgs()
        {
        }
    }

    public sealed class GetPackerImageInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// Name of the cloud provider this image is stored-in.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// HCP ID of this image.
        /// </summary>
        [Input("iterationId", required: true)]
        public Input<string> IterationId { get; set; } = null!;

        /// <summary>
        /// Region this image is stored in, if any.
        /// </summary>
        [Input("region", required: true)]
        public Input<string> Region { get; set; } = null!;

        public GetPackerImageInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPackerImageResult
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// HCP ID of this build.
        /// </summary>
        public readonly string BuildId;
        /// <summary>
        /// Cloud Image ID or URL string identifying this image for the builder that built it.
        /// </summary>
        public readonly string CloudImageId;
        /// <summary>
        /// Name of the cloud provider this image is stored-in.
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// Name of the builder that built this. Ex: 'amazon-ebs.example'
        /// </summary>
        public readonly string ComponentType;
        /// <summary>
        /// Creation time of this build.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// HCP ID of this image.
        /// </summary>
        public readonly string IterationId;
        /// <summary>
        /// Labels associated with this build.
        /// </summary>
        public readonly ImmutableDictionary<string, object> Labels;
        /// <summary>
        /// The ID of the organization this HCP Packer registry is located in.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// UUID of this build.
        /// </summary>
        public readonly string PackerRunUuid;
        /// <summary>
        /// The ID of the project this HCP Packer registry is located in.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Region this image is stored in, if any.
        /// </summary>
        public readonly string Region;

        [OutputConstructor]
        private GetPackerImageResult(
            string bucketName,

            string buildId,

            string cloudImageId,

            string cloudProvider,

            string componentType,

            string createdAt,

            string id,

            string iterationId,

            ImmutableDictionary<string, object> labels,

            string organizationId,

            string packerRunUuid,

            string projectId,

            string region)
        {
            BucketName = bucketName;
            BuildId = buildId;
            CloudImageId = cloudImageId;
            CloudProvider = cloudProvider;
            ComponentType = componentType;
            CreatedAt = createdAt;
            Id = id;
            IterationId = iterationId;
            Labels = labels;
            OrganizationId = organizationId;
            PackerRunUuid = packerRunUuid;
            ProjectId = projectId;
            Region = region;
        }
    }
}
