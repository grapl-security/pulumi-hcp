// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Hcp
{
    public static class GetPackerIteration
    {
        /// <summary>
        /// &gt; **Note:** This feature is currently in beta.
        /// 
        /// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given a channel.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var hardened_source = Output.Create(Hcp.GetPackerIteration.InvokeAsync(new Hcp.GetPackerIterationArgs
        ///         {
        ///             BucketName = "hardened-ubuntu-16-04",
        ///             Channel = "megan-test",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetPackerIterationResult> InvokeAsync(GetPackerIterationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetPackerIterationResult>("hcp:index/getPackerIteration:getPackerIteration", args ?? new GetPackerIterationArgs(), options.WithDefaults());

        /// <summary>
        /// &gt; **Note:** This feature is currently in beta.
        /// 
        /// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given a channel.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var hardened_source = Output.Create(Hcp.GetPackerIteration.InvokeAsync(new Hcp.GetPackerIterationArgs
        ///         {
        ///             BucketName = "hardened-ubuntu-16-04",
        ///             Channel = "megan-test",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetPackerIterationResult> Invoke(GetPackerIterationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetPackerIterationResult>("hcp:index/getPackerIteration:getPackerIteration", args ?? new GetPackerIterationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetPackerIterationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        [Input("bucketName", required: true)]
        public string BucketName { get; set; } = null!;

        /// <summary>
        /// The channel that points to the version of the image you want.
        /// </summary>
        [Input("channel", required: true)]
        public string Channel { get; set; } = null!;

        public GetPackerIterationArgs()
        {
        }
    }

    public sealed class GetPackerIterationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        [Input("bucketName", required: true)]
        public Input<string> BucketName { get; set; } = null!;

        /// <summary>
        /// The channel that points to the version of the image you want.
        /// </summary>
        [Input("channel", required: true)]
        public Input<string> Channel { get; set; } = null!;

        public GetPackerIterationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetPackerIterationResult
    {
        /// <summary>
        /// The name of the person who created this iteration.
        /// </summary>
        public readonly string AuthorId;
        /// <summary>
        /// The slug of the HCP Packer Registry image bucket to pull from.
        /// </summary>
        public readonly string BucketName;
        /// <summary>
        /// The channel that points to the version of the image you want.
        /// </summary>
        public readonly string Channel;
        /// <summary>
        /// Creation time of this iteration
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The unique fingerprint associated with this iteration; often a git sha.
        /// </summary>
        public readonly string Fingerprint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Incremental version of this iteration
        /// </summary>
        public readonly int IncrementalVersion;
        /// <summary>
        /// The ID of the organization this HCP Packer registry is located in.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The ID of the project this HCP Packer registry is located in.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// The ULID of this iteration.
        /// </summary>
        public readonly string Ulid;
        /// <summary>
        /// Time this build was last updated.
        /// </summary>
        public readonly string UpdatedAt;

        [OutputConstructor]
        private GetPackerIterationResult(
            string authorId,

            string bucketName,

            string channel,

            string createdAt,

            string fingerprint,

            string id,

            int incrementalVersion,

            string organizationId,

            string projectId,

            string ulid,

            string updatedAt)
        {
            AuthorId = authorId;
            BucketName = bucketName;
            Channel = channel;
            CreatedAt = createdAt;
            Fingerprint = fingerprint;
            Id = id;
            IncrementalVersion = incrementalVersion;
            OrganizationId = organizationId;
            ProjectId = projectId;
            Ulid = ulid;
            UpdatedAt = updatedAt;
        }
    }
}
