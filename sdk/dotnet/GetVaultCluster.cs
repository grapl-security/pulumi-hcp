// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Hcp
{
    public static class GetVaultCluster
    {
        /// <summary>
        /// The cluster data source provides information about an existing HCP Vault cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Hcp.GetVaultCluster.InvokeAsync(new Hcp.GetVaultClusterArgs
        ///         {
        ///             ClusterId = @var.Cluster_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetVaultClusterResult> InvokeAsync(GetVaultClusterArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetVaultClusterResult>("hcp:index/getVaultCluster:getVaultCluster", args ?? new GetVaultClusterArgs(), options.WithDefaults());

        /// <summary>
        /// The cluster data source provides information about an existing HCP Vault cluster.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Hcp = Pulumi.Hcp;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var example = Output.Create(Hcp.GetVaultCluster.InvokeAsync(new Hcp.GetVaultClusterArgs
        ///         {
        ///             ClusterId = @var.Cluster_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetVaultClusterResult> Invoke(GetVaultClusterInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetVaultClusterResult>("hcp:index/getVaultCluster:getVaultCluster", args ?? new GetVaultClusterInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetVaultClusterArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the HCP Vault cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public string ClusterId { get; set; } = null!;

        public GetVaultClusterArgs()
        {
        }
    }

    public sealed class GetVaultClusterInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The ID of the HCP Vault cluster.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        public GetVaultClusterInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetVaultClusterResult
    {
        /// <summary>
        /// The provider where the HCP Vault cluster is located.
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// The ID of the HCP Vault cluster.
        /// </summary>
        public readonly string ClusterId;
        /// <summary>
        /// The time that the Vault cluster was created.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// The ID of the HVN this HCP Vault cluster is associated to.
        /// </summary>
        public readonly string HvnId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The minimum Vault version to use when creating the cluster. If not specified, it is defaulted to the version that is currently recommended by HCP.
        /// </summary>
        public readonly string MinVaultVersion;
        /// <summary>
        /// The name of the customer namespace this HCP Vault cluster is located in.
        /// </summary>
        public readonly string Namespace;
        /// <summary>
        /// The ID of the organization this HCP Vault cluster is located in.
        /// </summary>
        public readonly string OrganizationId;
        /// <summary>
        /// The ID of the project this HCP Vault cluster is located in.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Denotes that the cluster has a public endpoint. Defaults to false.
        /// </summary>
        public readonly bool PublicEndpoint;
        /// <summary>
        /// The region where the HCP Vault cluster is located.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The tier that the HCP Vault cluster will be provisioned as.  Only 'development' is available at this time.
        /// </summary>
        public readonly string Tier;
        /// <summary>
        /// The private URL for the Vault cluster.
        /// </summary>
        public readonly string VaultPrivateEndpointUrl;
        /// <summary>
        /// The public URL for the Vault cluster. This will be empty if `public_endpoint` is `false`.
        /// </summary>
        public readonly string VaultPublicEndpointUrl;
        /// <summary>
        /// The Vault version of the cluster.
        /// </summary>
        public readonly string VaultVersion;

        [OutputConstructor]
        private GetVaultClusterResult(
            string cloudProvider,

            string clusterId,

            string createdAt,

            string hvnId,

            string id,

            string minVaultVersion,

            string @namespace,

            string organizationId,

            string projectId,

            bool publicEndpoint,

            string region,

            string tier,

            string vaultPrivateEndpointUrl,

            string vaultPublicEndpointUrl,

            string vaultVersion)
        {
            CloudProvider = cloudProvider;
            ClusterId = clusterId;
            CreatedAt = createdAt;
            HvnId = hvnId;
            Id = id;
            MinVaultVersion = minVaultVersion;
            Namespace = @namespace;
            OrganizationId = organizationId;
            ProjectId = projectId;
            PublicEndpoint = publicEndpoint;
            Region = region;
            Tier = tier;
            VaultPrivateEndpointUrl = vaultPrivateEndpointUrl;
            VaultPublicEndpointUrl = vaultPublicEndpointUrl;
            VaultVersion = vaultVersion;
        }
    }
}
