// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/grapl-security/pulumi-hcp/sdk/go/hcp"
// 	"github.com/pulumi/pulumi-hcp/sdk/go/hcp"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		hardened_source, err := hcp.GetPackerIteration(ctx, &GetPackerIterationArgs{
// 			BucketName: "hardened-ubuntu-16-04",
// 			Channel:    "production",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		foo, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
// 			BucketName:    "hardened-ubuntu-16-04",
// 			CloudProvider: "aws",
// 			IterationId:   hardened_source.Ulid,
// 			Region:        "us-east-1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("packer-registry-ubuntu", foo.CloudImageId)
// 		return nil
// 	})
// }
// ```
//
// > **Note:** This data source only returns the first found image's metadata filtered by the given schema values, from the returned list of images associated with the specified iteration. Therefore, if multiple images exist in the same region, it will only pick one of them. If that's the case, you may consider separating your builds into different buckets.
func GetPackerImage(ctx *pulumi.Context, args *GetPackerImageArgs, opts ...pulumi.InvokeOption) (*GetPackerImageResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPackerImageResult
	err := ctx.Invoke("hcp:index/getPackerImage:getPackerImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPackerImage.
type GetPackerImageArgs struct {
	BucketName    string `pulumi:"bucketName"`
	CloudProvider string `pulumi:"cloudProvider"`
	IterationId   string `pulumi:"iterationId"`
	Region        string `pulumi:"region"`
}

// A collection of values returned by getPackerImage.
type GetPackerImageResult struct {
	BucketName    string `pulumi:"bucketName"`
	BuildId       string `pulumi:"buildId"`
	CloudImageId  string `pulumi:"cloudImageId"`
	CloudProvider string `pulumi:"cloudProvider"`
	ComponentType string `pulumi:"componentType"`
	CreatedAt     string `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id             string                 `pulumi:"id"`
	IterationId    string                 `pulumi:"iterationId"`
	Labels         map[string]interface{} `pulumi:"labels"`
	OrganizationId string                 `pulumi:"organizationId"`
	PackerRunUuid  string                 `pulumi:"packerRunUuid"`
	ProjectId      string                 `pulumi:"projectId"`
	Region         string                 `pulumi:"region"`
}

func GetPackerImageOutput(ctx *pulumi.Context, args GetPackerImageOutputArgs, opts ...pulumi.InvokeOption) GetPackerImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPackerImageResult, error) {
			args := v.(GetPackerImageArgs)
			r, err := GetPackerImage(ctx, &args, opts...)
			return *r, err
		}).(GetPackerImageResultOutput)
}

// A collection of arguments for invoking getPackerImage.
type GetPackerImageOutputArgs struct {
	BucketName    pulumi.StringInput `pulumi:"bucketName"`
	CloudProvider pulumi.StringInput `pulumi:"cloudProvider"`
	IterationId   pulumi.StringInput `pulumi:"iterationId"`
	Region        pulumi.StringInput `pulumi:"region"`
}

func (GetPackerImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackerImageArgs)(nil)).Elem()
}

// A collection of values returned by getPackerImage.
type GetPackerImageResultOutput struct{ *pulumi.OutputState }

func (GetPackerImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackerImageResult)(nil)).Elem()
}

func (o GetPackerImageResultOutput) ToGetPackerImageResultOutput() GetPackerImageResultOutput {
	return o
}

func (o GetPackerImageResultOutput) ToGetPackerImageResultOutputWithContext(ctx context.Context) GetPackerImageResultOutput {
	return o
}

func (o GetPackerImageResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) BuildId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.BuildId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) CloudImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CloudImageId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) ComponentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.ComponentType }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPackerImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) IterationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.IterationId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetPackerImageResult) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetPackerImageResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) PackerRunUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.PackerRunUuid }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.Region }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPackerImageResultOutput{})
}
