// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package hcp

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id or a channel.
//
// ## Example Usage
// ### Single image sourcing
//
// ```go
// package main
//
// import (
// 	"github.com/grapl-security/pulumi-hcp/sdk/go/hcp"
// 	"github.com/pulumi/pulumi-hcp/sdk/go/hcp"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		baz, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
// 			BucketName:    "hardened-ubuntu-16-04",
// 			CloudProvider: "aws",
// 			Channel:       pulumi.StringRef("production"),
// 			Region:        "us-east-1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("packer-registry-ubuntu-east-1", baz.CloudImageId)
// 		return nil
// 	})
// }
// ```
//
// > **Note:** The `channel` attribute in this data source may incur a billable request to HCP Packer. This attribute is intended for convenience when using a single image. When sourcing multiple images from a single iteration, the `getPackerIteration` data source is the alternative for querying a channel just once.
// ### Multiple image sourcing from a single iteration
//
// ```go
// package main
//
// import (
// 	"github.com/grapl-security/pulumi-hcp/sdk/go/hcp"
// 	"github.com/pulumi/pulumi-hcp/sdk/go/hcp"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		hardened_source, err := hcp.GetPackerIteration(ctx, &GetPackerIterationArgs{
// 			BucketName: "hardened-ubuntu-16-04",
// 			Channel:    "production",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		foo, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
// 			BucketName:    "hardened-ubuntu-16-04",
// 			CloudProvider: "aws",
// 			IterationId:   pulumi.StringRef(hardened_source.Ulid),
// 			Region:        "us-east-1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		bar, err := hcp.GetPackerImage(ctx, &GetPackerImageArgs{
// 			BucketName:    "hardened-ubuntu-16-04",
// 			CloudProvider: "aws",
// 			IterationId:   pulumi.StringRef(hardened_source.Ulid),
// 			Region:        "us-west-1",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("packer-registry-ubuntu-east-1", foo.CloudImageId)
// 		ctx.Export("packer-registry-ubuntu-west-1", bar.CloudImageId)
// 		return nil
// 	})
// }
// ```
//
// > **Note:** This data source only returns the first found image's metadata filtered by the given arguments, from the returned list of images associated with the specified iteration. Therefore, if multiple images exist in the same region, it will only pick one of them. In this case, you can filter images by a source build name (Ex: `amazon-ebs.example`) using the `componentType` optional argument.
func GetPackerImage(ctx *pulumi.Context, args *GetPackerImageArgs, opts ...pulumi.InvokeOption) (*GetPackerImageResult, error) {
	opts = pkgInvokeDefaultOpts(opts)
	var rv GetPackerImageResult
	err := ctx.Invoke("hcp:index/getPackerImage:getPackerImage", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getPackerImage.
type GetPackerImageArgs struct {
	BucketName    string  `pulumi:"bucketName"`
	Channel       *string `pulumi:"channel"`
	CloudProvider string  `pulumi:"cloudProvider"`
	ComponentType *string `pulumi:"componentType"`
	IterationId   *string `pulumi:"iterationId"`
	Region        string  `pulumi:"region"`
}

// A collection of values returned by getPackerImage.
type GetPackerImageResult struct {
	BucketName    string  `pulumi:"bucketName"`
	BuildId       string  `pulumi:"buildId"`
	Channel       *string `pulumi:"channel"`
	CloudImageId  string  `pulumi:"cloudImageId"`
	CloudProvider string  `pulumi:"cloudProvider"`
	ComponentType string  `pulumi:"componentType"`
	CreatedAt     string  `pulumi:"createdAt"`
	// The provider-assigned unique ID for this managed resource.
	Id             string                 `pulumi:"id"`
	IterationId    string                 `pulumi:"iterationId"`
	Labels         map[string]interface{} `pulumi:"labels"`
	OrganizationId string                 `pulumi:"organizationId"`
	PackerRunUuid  string                 `pulumi:"packerRunUuid"`
	ProjectId      string                 `pulumi:"projectId"`
	Region         string                 `pulumi:"region"`
	RevokeAt       string                 `pulumi:"revokeAt"`
}

func GetPackerImageOutput(ctx *pulumi.Context, args GetPackerImageOutputArgs, opts ...pulumi.InvokeOption) GetPackerImageResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (GetPackerImageResult, error) {
			args := v.(GetPackerImageArgs)
			r, err := GetPackerImage(ctx, &args, opts...)
			var s GetPackerImageResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(GetPackerImageResultOutput)
}

// A collection of arguments for invoking getPackerImage.
type GetPackerImageOutputArgs struct {
	BucketName    pulumi.StringInput    `pulumi:"bucketName"`
	Channel       pulumi.StringPtrInput `pulumi:"channel"`
	CloudProvider pulumi.StringInput    `pulumi:"cloudProvider"`
	ComponentType pulumi.StringPtrInput `pulumi:"componentType"`
	IterationId   pulumi.StringPtrInput `pulumi:"iterationId"`
	Region        pulumi.StringInput    `pulumi:"region"`
}

func (GetPackerImageOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackerImageArgs)(nil)).Elem()
}

// A collection of values returned by getPackerImage.
type GetPackerImageResultOutput struct{ *pulumi.OutputState }

func (GetPackerImageResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPackerImageResult)(nil)).Elem()
}

func (o GetPackerImageResultOutput) ToGetPackerImageResultOutput() GetPackerImageResultOutput {
	return o
}

func (o GetPackerImageResultOutput) ToGetPackerImageResultOutputWithContext(ctx context.Context) GetPackerImageResultOutput {
	return o
}

func (o GetPackerImageResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.BucketName }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) BuildId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.BuildId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) Channel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GetPackerImageResult) *string { return v.Channel }).(pulumi.StringPtrOutput)
}

func (o GetPackerImageResultOutput) CloudImageId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CloudImageId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) ComponentType() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.ComponentType }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o GetPackerImageResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) IterationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.IterationId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) Labels() pulumi.MapOutput {
	return o.ApplyT(func(v GetPackerImageResult) map[string]interface{} { return v.Labels }).(pulumi.MapOutput)
}

func (o GetPackerImageResultOutput) OrganizationId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.OrganizationId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) PackerRunUuid() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.PackerRunUuid }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetPackerImageResultOutput) RevokeAt() pulumi.StringOutput {
	return o.ApplyT(func(v GetPackerImageResult) string { return v.RevokeAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(GetPackerImageResultOutput{})
}
