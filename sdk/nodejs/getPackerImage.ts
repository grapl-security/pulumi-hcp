// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The Packer Image data source iteration gets the most recent iteration (or build) of an image, given an iteration id.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as hcp from "@pulumi/hcp";
 *
 * const hardened-source = hcp.getPackerIteration({
 *     bucketName: "hardened-ubuntu-16-04",
 *     channel: "production",
 * });
 * const foo = hardened_source.then(hardened_source => hcp.getPackerImage({
 *     bucketName: "hardened-ubuntu-16-04",
 *     cloudProvider: "aws",
 *     iterationId: hardened_source.ulid,
 *     region: "us-east-1",
 * }));
 * export const packer_registry_ubuntu = foo.then(foo => foo.cloudImageId);
 * ```
 */
export function getPackerImage(args: GetPackerImageArgs, opts?: pulumi.InvokeOptions): Promise<GetPackerImageResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("hcp:index/getPackerImage:getPackerImage", {
        "bucketName": args.bucketName,
        "cloudProvider": args.cloudProvider,
        "iterationId": args.iterationId,
        "region": args.region,
    }, opts);
}

/**
 * A collection of arguments for invoking getPackerImage.
 */
export interface GetPackerImageArgs {
    /**
     * The slug of the HCP Packer Registry image bucket to pull from.
     */
    bucketName: string;
    /**
     * Name of the cloud provider this image is stored-in.
     */
    cloudProvider: string;
    /**
     * HCP ID of this image.
     */
    iterationId: string;
    /**
     * Region this image is stored in, if any.
     */
    region: string;
}

/**
 * A collection of values returned by getPackerImage.
 */
export interface GetPackerImageResult {
    /**
     * The slug of the HCP Packer Registry image bucket to pull from.
     */
    readonly bucketName: string;
    /**
     * HCP ID of this build.
     */
    readonly buildId: string;
    /**
     * Cloud Image ID or URL string identifying this image for the builder that built it.
     */
    readonly cloudImageId: string;
    /**
     * Name of the cloud provider this image is stored-in.
     */
    readonly cloudProvider: string;
    /**
     * Name of the builder that built this. Ex: 'amazon-ebs.example'
     */
    readonly componentType: string;
    /**
     * Creation time of this build.
     */
    readonly createdAt: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * HCP ID of this image.
     */
    readonly iterationId: string;
    /**
     * Labels associated with this build.
     */
    readonly labels: {[key: string]: any};
    /**
     * The ID of the organization this HCP Packer registry is located in.
     */
    readonly organizationId: string;
    /**
     * UUID of this build.
     */
    readonly packerRunUuid: string;
    /**
     * The ID of the project this HCP Packer registry is located in.
     */
    readonly projectId: string;
    /**
     * Region this image is stored in, if any.
     */
    readonly region: string;
}

export function getPackerImageOutput(args: GetPackerImageOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetPackerImageResult> {
    return pulumi.output(args).apply(a => getPackerImage(a, opts))
}

/**
 * A collection of arguments for invoking getPackerImage.
 */
export interface GetPackerImageOutputArgs {
    /**
     * The slug of the HCP Packer Registry image bucket to pull from.
     */
    bucketName: pulumi.Input<string>;
    /**
     * Name of the cloud provider this image is stored-in.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * HCP ID of this image.
     */
    iterationId: pulumi.Input<string>;
    /**
     * Region this image is stored in, if any.
     */
    region: pulumi.Input<string>;
}
